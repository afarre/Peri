/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_tim.h"
#include "misc.h"
#include "delay.h"
#include "clock.h"
#include "tm_stm32f4_disco.h"
#include "stm32f4xx_sdram.h"
#include "stm32f429i_discovery_lcd.h"

#define SDRAM_USE_STM324x9_EVAL

int fastLED = 0;
int count = 0;
int freq = 0;
int totalMostres[300];
volatile uint32_t status = 0;
volatile uint32_t i;
__IO uint16_t ADC3ConvertedValue = 0;
__IO uint32_t ADC3ConvertedVoltage = 0;

unsigned long *sdram = (unsigned long *)0xD0000000;

#define ADC3_DR_ADDRESS    ((uint32_t)0x4001224C)
#define ARRAYSIZE 300
#define LCD_COLOR_BLUE 0x001F

#define SDRAM_BANK FMC_Bank2_SDRAM

static uint32_t CurrentFrameBuffer = LCD_FRAME_BUFFER;

#define MARC_X 10
#define MARC_Y 10

#define MAX_Y 240
#define MAX_X 320

typedef enum {
	NO_OK = 0 ,
	OK = !NO_OK

} RetSt;


RetSt SetPixel (uint16_t col, uint16_t row, uint8_t alpha, uint8_t red, uint8_t green, uint8_t blue){
	if (col > 320 || row > 240) return NO_OK;
	else{
		uint16_t color = ((0x01 & (alpha)) <<15) | ((0x1f & (red)) <<10) | ((0x1f & (green)) <<5)| ((0x1f & (blue)) );
		LCD_SetTextColor(color);
		LCD_DrawLine(col,row, 1, LCD_DIR_HORIZONTAL);
		return OK;
	}
}

void pintaMarc(){
	//de dalt a baix
	for(uint16_t i = 0; i < MARC_X; i++) {
		for(int j = 0; j < MAX_Y; j++){
			SetPixel(j, i, 1, 0, 0, 1);
		}
	}

	for(int i = MARC_X - MAX_X; i < MARC_X; i++) {
		for(int j = 0; j < MAX_Y; j++){
			SetPixel(j, i, 1, 0, 0, 1);
		}
	}

	for(uint16_t i = 0; i < MARC_Y; i++) {
		for(int j = 0; j < MAX_X; j++){
			SetPixel(i, j, 1, 0, 0, 1);
		}
	}


	for(uint16_t i = MARC_Y - MAX_Y; i < MARC_Y; i++) {
		for(int j = 0; j < MAX_X; j++){
			SetPixel(i, j, 1, 0, 0, 1);
		}
	}

	for(uint16_t i = 0; i < MARC_Y; i++) {

			SetPixel(i, i, 1, 0, 0, 1);

		}

}


void pintaEixos(){

}



void pintaPantalla(){
	// Disable write protection
	FMC_SDRAMWriteProtectionConfig(SDRAM_BANK, DISABLE);
	pintaMarc();
	pintaEixos();
/*
	for(int i = 0; i < 500; i++) {
			SetPixel(i, i, 1, 0, 0, 1);
	}
*/
}


void startMemoryToMemoryTransfer(){
	//initialize destination arrays
	uint32_t destination[ARRAYSIZE];
	//enable DMA1 clock
	RCC_AHB3PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
	//create DMA structure
	DMA_InitTypeDef  DMA_InitStructure;
	//reset DMA1 channe1 to default values;
	DMA_DeInit(DMA1_Stream1);
	//channel will be used for memory to memory transfer
	//DMA_InitStructure.DMA_M2M = DMA_M2M_Enable;
	//setting normal mode (non circular)
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
	//medium priority
	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
	//source and destination data size word=32bit
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
	//automatic memory increment enable. Destination and source
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable;
	//Location assigned to peripheral register will be source
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
	//chunk of data to be transfered
	DMA_InitStructure.DMA_BufferSize = ARRAYSIZE;
	//source and destination start addresses
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)totalMostres;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)destination;
	//send values to DMA registers
	DMA_Init(DMA1_Stream1, &DMA_InitStructure);
	// Enable DMA1 Channel Transfer Complete interrupt
	DMA_ITConfig(DMA1_Stream1, DMA_IT_TC, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	//Enable DMA1 channel IRQ Channel */
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	//Enable DMA1 Channel transfer
	DMA_Cmd(DMA1_Stream1, ENABLE);
		for (i=0; i < ARRAYSIZE; i++){
			destination[i] = totalMostres[i];
		}
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
		pintaPantalla();
}

/**
  * @brief  ADC3 channel07 with DMA configuration
  * @param  None
  * @retval None
  */
void ADC3_CH7_DMA_Config(void){
  ADC_InitTypeDef       ADC_InitStructure;
  ADC_CommonInitTypeDef ADC_CommonInitStructure;
  DMA_InitTypeDef       DMA_InitStructure;
  GPIO_InitTypeDef      GPIO_InitStructure;

  /* Enable ADC3, DMA2 and GPIO clocks ****************************************/
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOF, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);

  /* DMA2 Stream0 channel2 configuration **************************************/
  DMA_InitStructure.DMA_Channel = DMA_Channel_2;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC3_DR_ADDRESS;
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC3ConvertedValue;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
  DMA_InitStructure.DMA_BufferSize = 1;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(DMA2_Stream0, &DMA_InitStructure);
  DMA_Cmd(DMA2_Stream0, ENABLE);

  /* Configure ADC3 Channel7 pin as analog input ******************************/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOF, &GPIO_InitStructure);

  /* ADC Common Init **********************************************************/
  ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
  ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
  ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
  ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
  ADC_CommonInit(&ADC_CommonInitStructure);

  /* ADC3 Init ****************************************************************/
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
  ADC_InitStructure.ADC_ScanConvMode = DISABLE;
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
  ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_NbrOfConversion = 1;
  ADC_Init(ADC3, &ADC_InitStructure);

  /* ADC3 regular channel7 configuration *************************************/
  ADC_RegularChannelConfig(ADC3, ADC_Channel_7, 1, ADC_SampleTime_3Cycles);

 /* Enable DMA request after last transfer (Single-ADC mode) */
  ADC_DMARequestAfterLastTransferCmd(ADC3, ENABLE);

  /* Enable ADC3 DMA */
  ADC_DMACmd(ADC3, ENABLE);

  /* Enable ADC3 */
  ADC_Cmd(ADC3, ENABLE);
}

void BUTTON_Configure(void){
	//Enable clock for GPOIA
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	GPIO_InitTypeDef GPIO_InitStruct;
	//Pin 0
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
	//Mode output
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
	//Output type push-pull
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	//With pull down resistor
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
	//100MHz pin speed
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	//Initialize pin on GPIOA port
	GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void TIM2_Init(){
	//SOURCE: https://www.rapitasystems.com/blog/setting-up-a-free-running-timer-on-the-stm-32-discovery-f4-board
	TIM_TimeBaseInitTypeDef SetupTimer;
	/* Enable timer 2, using the Reset and Clock Control register */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	SetupTimer.TIM_Prescaler = 0x0000;
	SetupTimer.TIM_CounterMode = TIM_CounterMode_Up;
	SetupTimer.TIM_Period = 0xFFFFFFFF;
	SetupTimer.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseInit(TIM2, &SetupTimer);
	TIM_Cmd(TIM2, ENABLE); /* start counting by enabling CEN in CR1 */
}

void reconfigTimer2(){
	// Enable clock for TIM2
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

		// TIM2 initialization overflow every 500ms
		// TIM2 by default has clock of 84MHz
		// Here, we must set value of prescaler and period,
		// so update event is 0.5Hz or 500ms
		// Update Event (Hz) = timer_clock / ((TIM_Prescaler + 1) *
		// (TIM_Period + 1))
		// Update Event (Hz) = 84MHz / ((4199 + 1) * (9999 + 1)) = 2 Hz
		TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
		TIM_TimeBaseInitStruct.TIM_Prescaler = 1;
		TIM_TimeBaseInitStruct.TIM_Period = 47;
		TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
		TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;

		// TIM2 initialize
		TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
		// Enable TIM2 interrupt
		TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

		// Nested vectored interrupt settings
		// TIM2 interrupt is most important (PreemptionPriority and
		// SubPriority = 0)
		NVIC_InitTypeDef NVIC_InitStruct;
		NVIC_InitStruct.NVIC_IRQChannel = TIM2_IRQn;
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
		NVIC_Init(&NVIC_InitStruct);
}

void GPIO_Configure (void){
    GPIO_InitTypeDef GPIO_InitDef;

	//Activem el clock per els pins G
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);

	//Inicialitzem leds:
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitDef.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitDef.GPIO_OType = GPIO_OType_PP;
	GPIO_InitDef.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOG, &GPIO_InitDef);
	GPIO_SetBits(GPIOG, GPIO_Pin_13);

	//ADC
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd (RCC_AHB1Periph_GPIOA, ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	//    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	//    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init (GPIOA, &GPIO_InitStructure);
}

void LEDToggle(){
	if (count >= 400000){
		GPIO_ToggleBits(GPIOG, GPIO_Pin_13);
		count = 0;
	}else{
		count+=10;
	}
}

int main(void){
	//TIM4 config source: http://embeddedsystemengineering.blogspot.com/2015/08/stm32f4-discovery-tutorial-10-pwm.html
	//TIM4 config source: https://stm32f4-discovery.net/2014/05/stm32f4-stm32f429-discovery-pwm-tutorial/

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	TIM2_Init();
	GPIO_Configure();
	BUTTON_Configure();
	ADC3_CH7_DMA_Config();
	//ADC3_CH7_DMA_Config source: https://github.com/Dima-Meln/stm32-cmake/blob/master/stm32f4/libs/STM32F4xx_DSP_StdPeriph_Lib_V1.0.0/Project/STM32F4xx_StdPeriph_Examples/ADC/ADC3_DMA/main.c

	// Inicialitzacions Necessaries
		SystemInit();
		/* LCD initialization */
		 LCD_Init();
		/* LCD Layer initialization */
		LCD_LayerInit();
		 // Enable Layer1
		LTDC_LayerCmd(LTDC_Layer1, ENABLE);
	    /* Enable the LTDC */
		LTDC_Cmd(ENABLE);
		/* Set LCD foreground layer */
		 LCD_SetLayer(LCD_FOREGROUND_LAYER);
		LCD_Clear(LCD_COLOR_WHITE);
	SDRAM_Init();

	//	ADC_Config();
	//ADC config source 1: http://electronicatk.blogspot.com/2016/01/adc-stm32f4-discovery.html
	//ADC config source 2: http://embeddedsystemengineering.blogspot.com/2015/07/stm32f4-discovery-tutorial-7-adc.html

	/* -------------------------------------------------------------- */
	GPIO_ResetBits(GPIOG, GPIO_Pin_14);
	int LED = 1;
    while (1){
		// Delay initialization
		//DELAY_Init();

    	// Button pressed
    	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
    		// Save TIM2 start value
    		unsigned long countStart = TIM_GetCounter(TIM2);

    		do{
    			//do LED toggle while button pressed
    			if(LED){
    				LEDToggle();
    			}
			}while(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0));

    		//USer stopped pressing button
			// Save TIM2 end value
			unsigned long countStop = TIM_GetCounter(TIM2);

			if((countStop - countStart) < 60000000){
				//button pressed for less than 2.5seconds
				freq++;
				if (freq >= 3){
					freq = 0;
				}
			}else{
				//button pressed for more than 2.5seconds
				GPIO_ResetBits(GPIOG, GPIO_Pin_13);
				GPIO_SetBits(GPIOG, GPIO_Pin_14);
				LED = 0;
				reconfigTimer2();
				TIM_Cmd(TIM2, ENABLE);
			}
    	}
    	//do LED toggle while button unpressed
    	if(LED){
			LEDToggle();
		}
   	}
}

int compt = 0;
int mostres = 0;
void TIM2_IRQHandler(){
    // Checks whether the TIM2 interrupt has occurred or not
    if (TIM_GetITStatus(TIM2, TIM_IT_Update)){
//    	GPIO_ToggleBits(GPIOG, GPIO_Pin_14);
//    	int adcData = 0;

    	if(mostres < 300){
    		if (freq == 0){
    			//freq == 0 -> una mostra cada 10us
    			//adcData = ADC_Read();
    			/* Start ADC3 Software Conversion */
    			ADC_SoftwareStartConv(ADC3);
    		}else if (freq == 1){
    			//freq == 1 -> una mostra cada 100us
    			compt++;
    			if (compt == 10){
    				//adcData = ADC_Read();
    				ADC_SoftwareStartConv(ADC3);
    				compt = 0;
    			}
    		}else if (freq == 2){
    			//freq == 2 -> una mostra cada 1ms
    			compt++;
				if (compt == 100){
					//adcData = ADC_Read();
					ADC_SoftwareStartConv(ADC3);
					compt = 0;
				}
    		}
    		totalMostres[mostres] = ADC3ConvertedValue;
    		mostres++;
    	}else{
    		ADC_DMACmd(ADC3, DISABLE);
    		TIM_Cmd(TIM2, DISABLE);
    		GPIO_ResetBits(GPIOG, GPIO_Pin_14);
    		startMemoryToMemoryTransfer();
        }
        // Clears the TIM2 interrupt pending bit
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    }
}
