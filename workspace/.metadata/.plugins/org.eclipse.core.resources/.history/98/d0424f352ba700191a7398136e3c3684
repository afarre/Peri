/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_tim.h"
#include "misc.h"
#include "delay.h"
#include "clock.h"
#include "tm_stm32f4_disco.h"

int fastLED = 0;
int count = 0;
int TIM4_Channel1_value = 0;
int TIM4_Channel2_value = 0;

#define 	GPIO_FullRemap_TIM3   ((uint32_t)0x001A0C00)
/*
int IC2Value = 0;
int DutyCycle = 0;
int Frequency = 0;

static TIM_ICInitTypeDef TIM_CH1_ICInitStructure;

 *
 *
 * SOURCE 1: https://community.st.com/s/question/0D50X00009Xke3CSAR/stm32f10x-input-capture
 * SOURCE 2: https://community.st.com/s/question/0D50X00009XketjSAB/timer-in-pwm-capture-mode
 * SOURCE 3: https://community.st.com/s/question/0D50X00009XkXm2SAF/input-capture-porblem
 * SOURCE 4: https://community.st.com/s/question/0D50X00009XkYqeSAF/multiple-pwm-input-capture-on-one-timer
 *
void ConfigPwmIn() {
 GPIO_InitTypeDef GPIO_InitStructure;
 TIM_ICInitTypeDef TIM_ICInitStructure;
 NVIC_InitTypeDef NVIC_InitStructure;
 TIM_DeInit(TIM3 );
 // TIM3 clock enable
 RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 // GPIOC clock enable
 RCC_AHB3PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 // TIM3 GPIO pin configuration : CH1=PD3, C2=PD4
 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4;
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 GPIO_Init(GPIOD, &GPIO_InitStructure);
 // Connect pins to TIM3 AF2
 GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_TIM3 );
 GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_TIM3 );
 NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 NVIC_Init(&NVIC_InitStructure);
 // Enable capture
 TIM_CH1_ICInitStructure.TIM_Channel = TIM_Channel_1;
 TIM_CH1_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 TIM_CH1_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 TIM_CH1_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 TIM_CH1_ICInitStructure.TIM_ICFilter = 0;
 TIM_ICInit(TIM3, &TIM_ICInitStructure);
 TIM_ICInitStructure.TIM_Channel = TIM_Channel_2;
 TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 TIM_ICInitStructure.TIM_ICFilter = 0;
 TIM_ICInit(TIM3, &TIM_ICInitStructure);
 // Enable TIM3
 TIM_Cmd(TIM3, ENABLE);
 // Enable CC1-4 interrupt
 TIM_ITConfig(TIM3, TIM_IT_CC1 | TIM_IT_CC2, ENABLE);
 // Clear CC1 Flag
 TIM_ClearFlag(TIM3, TIM_FLAG_CC1 | TIM_FLAG_CC2);
}
static volatile uint32_t ccr[2];



static volatile char pulseState = 0;
void TIM3_IRQHandler() {

	/*
	if (TIM_GetITStatus(TIM3, TIM_IT_CC2) != RESET){
		// Clear TIM3 Capture compare interrupt pending bit
		TIM_ClearITPendingBit(TIM3, TIM_IT_CC2);
		// Get the Input Capture value
		IC2Value = TIM_GetCapture2(TIM3);
		if (IC2Value != 0){
			// Duty cycle computation
			DutyCycle = (TIM_GetCapture1(TIM3) * 100) / IC2Value;
			// Frequency computation
			Frequency = SystemCoreClock / IC2Value;
		}else{
			DutyCycle = 0;
			Frequency = 0;
		}
	}*/
/*
	if (TIM3 ->SR & TIM_IT_CC1 ) {
	 TIM3 ->SR &= (~TIM_IT_CC1 );
	 if (pulseState == 0) {
		 TIM_CH1_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Falling;
		 // Any time we get a rising edge on CH1, we reset the counter. All channels are
		 // phase aligned, so they all use this as a reference.
		 TIM_SetCounter(TIM3, 0);
	 } else {
		 TIM_CH1_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
		 // Pull the value on the falling edge.
		 ccr[0] = TIM_GetCapture1(TIM3);
		 int count1 = TIM_GetCounter(TIM3);
	 }
	 pulseState = !pulseState;
	 // Reverse polarity.
	 TIM_ICInit(TIM3, &TIM_CH1_ICInitStructure);
 }
 if (TIM3 ->SR & TIM_IT_CC2 ) {
	 TIM3 ->SR &= (~TIM_IT_CC2 );
	 ccr[1] = TIM_GetCapture2(TIM3);
	 int count2 = TIM_GetCounter(TIM3);


 }

}
*/

/* Configure pins to be interrupts */
void Configure_PD0(void) {
	/* Set variables used */
	GPIO_InitTypeDef GPIO_InitStruct;
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	/* Enable clock for GPIOD */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	/* Enable clock for SYSCFG */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	/* Set pin as input */
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &GPIO_InitStruct);

	/* Tell system that you will use PD0 for EXTI_Line0 */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource0);

	/* PD0 is connected to EXTI_Line0 */
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
	/* Enable interrupt */
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
	/* Interrupt mode */
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
	/* Triggers on rising and falling edge */
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	/* Add to EXTI */
	EXTI_Init(&EXTI_InitStruct);

	/* Add IRQ vector to NVIC */
	/* PD0 is connected to EXTI_Line0, which has EXTI0_IRQn vector */
	NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
	/* Set priority */
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
	/* Set sub priority */
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
	/* Enable interrupt */
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	/* Add to NVIC */
	NVIC_Init(&NVIC_InitStruct);
}

void Configure_PB12(void) {
	/* Set variables used */
	GPIO_InitTypeDef GPIO_InitStruct;
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	/* Enable clock for GPIOB */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	/* Enable clock for SYSCFG */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	/* Set pin as input */
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOB, &GPIO_InitStruct);

	/* Tell system that you will use PB12 for EXTI_Line12 */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource12);

	/* PB12 is connected to EXTI_Line12 */
	EXTI_InitStruct.EXTI_Line = EXTI_Line12;
	/* Enable interrupt */
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
	/* Interrupt mode */
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
	/* Triggers on rising and falling edge */
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	/* Add to EXTI */
	EXTI_Init(&EXTI_InitStruct);

	/* Add IRQ vector to NVIC */
	/* PB12 is connected to EXTI_Line12, which has EXTI15_10_IRQn vector */
	NVIC_InitStruct.NVIC_IRQChannel = EXTI15_10_IRQn;
	/* Set priority */
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
	/* Set sub priority */
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
	/* Enable interrupt */
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	/* Add to NVIC */
	NVIC_Init(&NVIC_InitStruct);
}

/* Set interrupt handlers */
/* Handle PD0 interrupt */
void EXTI0_IRQHandler(void) {
	int flag = 1;
	unsigned long countStart;
	unsigned long countStop;
	unsigned long dif;
	/* Make sure that interrupt flag is set */
	if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
		/* Do your stuff when PD0 is changed */
		if(flag){
			countStart = TIM_GetCounter(TIM2);
		}else{
			countStop = TIM_GetCounter(TIM2);
		}
		flag = !flag;

		dif = countStop - countStart;

		//TIM5 channel 2 pin = PA1
		int aux = TIM5->CCR2;
		if(aux >= 8059){
			TIM5->CCR2 = 459;
		}else{
			aux = TIM5->CCR2 + 200;
			TIM5->CCR2 = aux;
		}

		/* Clear interrupt flag */
		EXTI_ClearITPendingBit(EXTI_Line0);
	}
}

/* Handle PB12 interrupt */
void EXTI15_10_IRQHandler(void) {

	/* Make sure that interrupt flag is set */
	if (EXTI_GetITStatus(EXTI_Line12) != RESET) {
		/* Do your stuff when PB12 is changed */

		switch(TIM4_Channel1_value){
		case 459:
			TIM3->CCR1 = 0;
			break;
		case 659:
			TIM3->CCR1 = 467;
			break;
		case 859:
			TIM3->CCR1 = 609;
			break;
		case 1059:
			TIM3->CCR1 = 751;
			break;
		case 1259:
			TIM3->CCR1 = 893;
			break;
		case 1459:
			TIM3->CCR1 = 1035;
			break;
		case 1659:
			TIM3->CCR1 = 1176;
			break;
		case 1859:
			TIM3->CCR1 = 1318;
			break;
		case 2059:
			TIM3->CCR1 = 1460;
			break;
		}
		//TIM5 channel 1 pin = PA0
		int aux = TIM5->CCR1;
		if(aux >= 8059){
			TIM5->CCR1 = 459;
		}else{
			aux = TIM5->CCR1 + 200;
			TIM5->CCR1 = aux;
		}

		/* Clear interrupt flag */
		EXTI_ClearITPendingBit(EXTI_Line12);
	}
}


void TIM4_Init(){
    // Enable clock for TIM4
    // We use TIM4 because green LED (PD12) is connected
    // to TIM4_CH1 GPIO AF mapping
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

    // Timer initialization struct
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;

    // Create 1kHz PWM
    // TIM4 is connected to APB1 bus that have default clock 84MHz
    // So, the frequency of TIM4 is 84MHz
    // We use prescaler 10 here
    // So, the frequency of TIM4 now is 8.4MHz
    TIM_TimeBaseInitStruct.TIM_Prescaler = 33;
    // TIM_Period determine the PWM frequency by this equation:
    // PWM_frequency = timer_clock / (TIM_Period + 1)
    // If we want 1kHz PWM we can calculate:
    // TIM_Period = (timer_clock / PWM_frequency) - 1
    // TIM_Period = (8.4MHz / 1kHz) - 1 = 8399
    TIM_TimeBaseInitStruct.TIM_Period = 8479;
    TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;

    // Initialize TIM4
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
    // Start TIM4
    TIM_Cmd(TIM4, ENABLE);
}

void PWM_TIM4_Init(){
	// PWM initialization struct
	TIM_OCInitTypeDef TIM_OCInitStruct;

    // Common PWM settings
    TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;

    // Duty cycle calculation equation:
    // TIM_Pulse = (((TIM_Period + 1) * duty_cycle) / 100) - 1
    // Ex. 25% duty cycle:
    //     TIM_Pulse = (((8399 + 1) * 25) / 100) - 1 = 2099
    //     TIM_Pulse = (((8399 + 1) * 75) / 100) - 1 = 6299
    // We initialize PWM value with duty cycle of 25%
    TIM_OCInitStruct.TIM_Pulse = 1259;						//Temps de PWM a 1 (4099 = 50%) (1259 = 1'5ms) (2107 = 2'5ms) (559 = 0'7ms)
    TIM_OC1Init(TIM4, &TIM_OCInitStruct);
    TIM_OC2Init(TIM4, &TIM_OCInitStruct);
    TIM_OC3Init(TIM4, &TIM_OCInitStruct);// PD14
    TIM_OC4Init(TIM4, &TIM_OCInitStruct);// PD13

    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
}

void TIM3_Init(){
    // Enable clock for TIM3
    // to TIM3_CH1 GPIO AF mapping
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

    // Timer initialization struct
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;

    // Create 1kHz PWM
    // TIM4 is connected to APB1 bus that have default clock 84MHz
    // So, the frequency of TIM4 is 84MHz
    // We use prescaler 10 here
    // So, the frequency of TIM4 now is 8.4MHz
    TIM_TimeBaseInitStruct.TIM_Prescaler = 1;
    // TIM_Period determine the PWM frequency by this equation:
    // PWM_frequency = timer_clock / (TIM_Period + 1)
    // If we want 1kHz PWM we can calculate:
    // TIM_Period = (timer_clock / PWM_frequency) - 1
    // TIM_Period = (8.4MHz / 1kHz) - 1 = 8399
    TIM_TimeBaseInitStruct.TIM_Period = 1450;
    TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;

    // Initialize TIM4
    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseInitStruct);
    // Start TIM3
    TIM_Cmd(TIM3, ENABLE);
}

void PWM_TIM3_Init(){
	// PWM initialization struct
	TIM_OCInitTypeDef TIM_OCInitStruct;

    // Common PWM settings
    TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;

    // Duty cycle calculation equation:
    // TIM_Pulse = (((TIM_Period + 1) * duty_cycle) / 100) - 1
    // Ex. 25% duty cycle:
    //     TIM_Pulse = (((8399 + 1) * 25) / 100) - 1 = 2099
    //     TIM_Pulse = (((8399 + 1) * 75) / 100) - 1 = 6299
    // We initialize PWM value with duty cycle of 25%
    TIM_OCInitStruct.TIM_Pulse = 1460;						//Temps de PWM a 1 (4099 = 50%) (1259 = 1'5ms) (2107 = 2'5ms) (559 = 0'7ms)
    TIM_OC1Init(TIM3, &TIM_OCInitStruct); //PA6
    TIM_OC2Init(TIM3, &TIM_OCInitStruct); //PA7


    TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
    TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
}

void TIM5_Init(){
	// Enable clock for TIM5
	    // We use TIM4 because green LED (PD12) is connected
	    // to TIM4_CH1 GPIO AF mapping
	    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);

	    // Timer initialization struct
	    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;

	    // Create 1kHz PWM
	    // TIM4 is connected to APB1 bus that have default clock 84MHz
	    // So, the frequency of TIM4 is 84MHz
	    // We use prescaler 10 here
	    // So, the frequency of TIM4 now is 8.4MHz
	    TIM_TimeBaseInitStruct.TIM_Prescaler = 33;
	    // TIM_Period determine the PWM frequency by this equation:
	    // PWM_frequency = timer_clock / (TIM_Period + 1)
	    // If we want 1kHz PWM we can calculate:
	    // TIM_Period = (timer_clock / PWM_frequency) - 1
	    // TIM_Period = (8.4MHz / 1kHz) - 1 = 8399
	    TIM_TimeBaseInitStruct.TIM_Period = 850;
	    TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
	    TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;

	    // Initialize TIM5
	    TIM_TimeBaseInit(TIM5, &TIM_TimeBaseInitStruct);
	    // Start TIM5
	    TIM_Cmd(TIM5, ENABLE);
}

void PWM_TIM5_Init(){
	// PWM initialization struct
	TIM_OCInitTypeDef TIM_OCInitStruct;

    // Common PWM settings
    TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;

    // Duty cycle calculation equation:
    // TIM_Pulse = (((TIM_Period + 1) * duty_cycle) / 100) - 1
    // Ex. 25% duty cycle:
    //     TIM_Pulse = (((8399 + 1) * 25) / 100) - 1 = 2099
    //     TIM_Pulse = (((8399 + 1) * 75) / 100) - 1 = 6299
    // We initialize PWM value with duty cycle of 25%
    TIM_OCInitStruct.TIM_Pulse = 1259;						//Temps de PWM a 1 (4099 = 50%) (1259 = 1'5ms) (2107 = 2'5ms) (559 = 0'7ms)
    TIM_OC1Init(TIM5, &TIM_OCInitStruct);
    TIM_OC2Init(TIM5, &TIM_OCInitStruct);

    TIM_OC1PreloadConfig(TIM5, TIM_OCPreload_Enable);
    TIM_OC2PreloadConfig(TIM5, TIM_OCPreload_Enable);
}

void TIM2_Init(){
	//SOURCE: https://www.rapitasystems.com/blog/setting-up-a-free-running-timer-on-the-stm-32-discovery-f4-board
	TIM_TimeBaseInitTypeDef SetupTimer;
	/* Enable timer 2, using the Reset and Clock Control register */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	SetupTimer.TIM_Prescaler = 0x0000;
	SetupTimer.TIM_CounterMode = TIM_CounterMode_Up;
	SetupTimer.TIM_Period = 0xFFFFFFFF;
	SetupTimer.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseInit(TIM2, &SetupTimer);
	TIM_Cmd(TIM2, ENABLE); /* start counting by enabling CEN in CR1 */
}

void GPIO_Configure (void){
    GPIO_InitTypeDef GPIO_InitDef;

	//Activem el clock per els pins G
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);

	//Inicialitzem leds:
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitDef.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitDef.GPIO_OType = GPIO_OType_PP;
	GPIO_InitDef.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOG, &GPIO_InitDef);
	GPIO_SetBits(GPIOG, GPIO_Pin_13);

	/* Set clock for GPIOD (TIM4)------------------------------------------ */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	// Set alternate function of GPIOD pin 12 as PWM outputs
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);

	// GPIOD pin 12 as outputs
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &GPIO_InitStruct);

	/* Set clock for GPIOA (TIM5)------------------------------------------ */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	// Set alternate function of GPIOA pin 12 as PWM outputs
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM5);

	// GPIOD pin 12 as outputs
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStruct);


	/* Set clock for GPIOA (TIM3)------------------------------------------ */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	// Set alternate function of GPIOD pin 12 as PWM outputs
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_TIM5);


	// GPIOD pin 12 as outputs
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void BUTTON_Configure(void){
	//Enable clock for GPOIA
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	GPIO_InitTypeDef GPIO_InitStruct;
	//Pin 0
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
	//Mode output
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
	//Output type push-pull
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	//With pull down resistor
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
	//100MHz pin speed
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	//Initialize pin on GPIOA port
	GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void LEDToggle(){
	if (fastLED){
		if (count >= 100000){
			GPIO_ToggleBits(GPIOG, GPIO_Pin_13);
			count = 0;
		}else{
			count+=10;
		}
	}else{
		if (count >= 5000000){
			GPIO_ToggleBits(GPIOG, GPIO_Pin_13);
			count = 0;
		}else{
			count+=10;
		}
	}
}

int main(void){
	//TIM4 config source: http://embeddedsystemengineering.blogspot.com/2015/08/stm32f4-discovery-tutorial-10-pwm.html
	//TIM4 config source: https://stm32f4-discovery.net/2014/05/stm32f4-stm32f429-discovery-pwm-tutorial/
	TIM4_Init();
	TIM5_Init();
	TIM3_Init();
	TIM2_Init();
	PWM_TIM5_Init();
	PWM_TIM4_Init();
	PWM_TIM3_Init();
	GPIO_Configure();
	BUTTON_Configure();
	//ConfigPwmIn();
	/* Configure PD0 as interrupt */
	Configure_PD0();
	/* Configure PB12 as interrupt */
	Configure_PB12();
	/* -------------------------------------------------------------- */
	GPIO_SetBits(GPIOG, GPIO_Pin_14);
    while (1){
		// Delay initialization
		//DELAY_Init();

    	// Button pressed
    	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
    		// Save TIM2 start value
    		GPIO_ToggleBits(GPIOG, GPIO_Pin_14);
    		unsigned long countStart = TIM_GetCounter(TIM2);

    		do{
    			//do LED toggle while button pressed
    			LEDToggle();
			}while(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0));

    		//USer stopped pressing button
			// Save TIM2 end value
    		GPIO_ToggleBits(GPIOG, GPIO_Pin_14);
			unsigned long countStop = TIM_GetCounter(TIM2);

			if((countStop - countStart) < 60000000){
				//button pressed for less than 2.5seconds
				if (fastLED){
					TIM4_Init();
					//TIM4 channel1 = PD12
					TIM4_Channel1_value = TIM4->CCR1;
					if(TIM4_Channel1_value >= 2059){
						TIM4->CCR1 = 459;
					}else{
						TIM4_Channel1_value = TIM4->CCR1 + 200;
						TIM4->CCR1 = TIM4_Channel1_value;
					}
				}else{
					TIM4_Init();
					//TIM4 channel2 = PD13
					TIM4_Channel2_value = TIM4->CCR2;
					if(TIM4_Channel2_value >= 2059){
						TIM4->CCR2 = 459;
					}else{
						TIM4_Channel2_value = TIM4->CCR2 + 200;
						TIM4->CCR2 = TIM4_Channel2_value;
					}
				}
			}else{
				//button pressed for more than 2.5seconds
				fastLED = !fastLED;
			}
    	}
    	//do LED toggle while button unpressed
    	LEDToggle();
   	}
}
