/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_tim.h"
#include "misc.h"
#include "delay.h"
#include "clock.h"
#include "tm_stm32f4_disco.h"

int fastLED = 0;

static TIM_ICInitTypeDef TIM_CH1_ICInitStructure;


void ConfigPwmIn() {
 GPIO_InitTypeDef GPIO_InitStructure;
 TIM_ICInitTypeDef TIM_ICInitStructure;
 NVIC_InitTypeDef NVIC_InitStructure;
 TIM_DeInit(TIM3 );
 /* TIM3 clock enable */
 RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 /* GPIOC clock enable */
 RCC_AHB3PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 /* TIM3 GPIO pin configuration : CH1=PD3, C2=PD4 */
 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4;
 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 GPIO_Init(GPIOD, &GPIO_InitStructure);
 /* Connect pins to TIM3 AF2 */
 GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_TIM3 );
 GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_TIM3 );
 NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 NVIC_Init(&NVIC_InitStructure);
 /* Enable capture*/
 TIM_CH1_ICInitStructure.TIM_Channel = TIM_Channel_1;
 TIM_CH1_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
 TIM_CH1_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 TIM_CH1_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 TIM_CH1_ICInitStructure.TIM_ICFilter = 0;
 TIM_ICInit(TIM3, &TIM_ICInitStructure);
 TIM_ICInitStructure.TIM_Channel = TIM_Channel_2;
 TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Falling;
 TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 TIM_ICInitStructure.TIM_ICFilter = 0;
 TIM_ICInit(TIM3, &TIM_ICInitStructure);
 /* Enable TIM3 */
 TIM_Cmd(TIM3, ENABLE);
 /* Enable CC1-4 interrupt */
 TIM_ITConfig(TIM3, TIM_IT_CC1 | TIM_IT_CC2, ENABLE);
 /* Clear CC1 Flag*/
 TIM_ClearFlag(TIM3, TIM_FLAG_CC1 | TIM_FLAG_CC2);
}
static volatile uint32_t ccr[2];



static volatile char pulseState = 0;
void TIM3_IRQHandler() {
	if (TIM3 ->SR & TIM_IT_CC1 ) {
	 TIM3 ->SR &= (~TIM_IT_CC1 );
	 if (pulseState == 0) {
		 TIM_CH1_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Falling;
		 // Any time we get a rising edge on CH1, we reset the counter. All channels are
		 // phase aligned, so they all use this as a reference.
		 TIM_SetCounter(TIM3, 0);
	 } else {
		 TIM_CH1_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
		 // Pull the value on the falling edge.
		 ccr[0] = TIM_GetCapture1(TIM3 );
	 }
	 pulseState = !pulseState;
	 // Reverse polarity.
	 TIM_ICInit(TIM3, &TIM_CH1_ICInitStructure);
 }
 if (TIM3 ->SR & TIM_IT_CC2 ) {
	 TIM3 ->SR &= (~TIM_IT_CC2 );
	 ccr[1] = TIM_GetCapture2(TIM3 );


 }
}


void TIM_Init(){
    // Enable clock for TIM4
    // We use TIM4 because green LED (PD12) is connected
    // to TIM4_CH1 GPIO AF mapping
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

    // Timer initialization struct
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;

    // Create 1kHz PWM
    // TIM4 is connected to APB1 bus that have default clock 84MHz
    // So, the frequency of TIM4 is 84MHz
    // We use prescaler 10 here
    // So, the frequency of TIM4 now is 8.4MHz
    TIM_TimeBaseInitStruct.TIM_Prescaler = 33;
    // TIM_Period determine the PWM frequency by this equation:
    // PWM_frequency = timer_clock / (TIM_Period + 1)
    // If we want 1kHz PWM we can calculate:
    // TIM_Period = (timer_clock / PWM_frequency) - 1
    // TIM_Period = (8.4MHz / 1kHz) - 1 = 8399
    TIM_TimeBaseInitStruct.TIM_Period = 8479;
    TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;

    // Initialize TIM4
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
    // Start TIM4
    TIM_Cmd(TIM4, ENABLE);
}

void GPIO_Configure (void){
    GPIO_InitTypeDef GPIO_InitDef;

	//Activem el clock per els pins G
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);

	//Inicialitzem leds:
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitDef.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitDef.GPIO_OType = GPIO_OType_PP;
	GPIO_InitDef.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOG, &GPIO_InitDef);
	GPIO_SetBits(GPIOG, GPIO_Pin_13);

}

void BUTTON_Configure(void){
	//Enable clock for GPOIA
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	GPIO_InitTypeDef GPIO_InitStruct;
	//Pin 0
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
	//Mode output
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
	//Output type push-pull
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	//With pull down resistor
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
	//100MHz pin speed
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	//Initialize pin on GPIOA port
	GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void PWM_Init(){
	// PWM initialization struct
	TIM_OCInitTypeDef TIM_OCInitStruct;

    // Common PWM settings
    TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;

    // Duty cycle calculation equation:
    // TIM_Pulse = (((TIM_Period + 1) * duty_cycle) / 100) - 1
    // Ex. 25% duty cycle:
    //     TIM_Pulse = (((8399 + 1) * 25) / 100) - 1 = 2099
    //     TIM_Pulse = (((8399 + 1) * 75) / 100) - 1 = 6299
    // We initialize PWM value with duty cycle of 25%
    TIM_OCInitStruct.TIM_Pulse = 1259;						//Temps de PWM a 1 (4099 = 50%) (1259 = 1'5ms) (2107 = 2'5ms) (559 = 0'7ms)
    TIM_OC1Init(TIM4, &TIM_OCInitStruct);
    TIM_OC2Init(TIM4, &TIM_OCInitStruct);
    TIM_OC3Init(TIM4, &TIM_OCInitStruct);// PD14
    TIM_OC4Init(TIM4, &TIM_OCInitStruct);//PD13

    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
    TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);


    // Enable clock for TIM2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

	// TIM2 initialization overflow every 500ms
	// TIM2 by default has clock of 84MHz
	// Here, we must set value of prescaler and period,
	// so update event is 0.5Hz or 500ms
	// Update Event (Hz) = timer_clock / ((TIM_Prescaler + 1) *
	// (TIM_Period + 1))
	// Update Event (Hz) = 84MHz / ((4199 + 1) * (9999 + 1)) = 2 Hz
	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
	TIM_TimeBaseInitStruct.TIM_Prescaler = 3599;
	TIM_TimeBaseInitStruct.TIM_Period = 9999;
	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;

	// TIM2 initialize
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
	// Enable TIM2 interrupt
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	// Nested vectored interrupt settings
	// TIM2 interrupt is most important (PreemptionPriority and
	// SubPriority = 0)
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStruct);
}


int main(void){
	TIM_Init();
	PWM_Init();
	GPIO_Configure();
	BUTTON_Configure();
	ConfigPwmIn();

	/* Set clock for GPIOD ------------------------------------------ */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	// Set alternate function of GPIOD pin 12 as PWM outputs
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);

	// GPIOD pin 12 as outputs
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &GPIO_InitStruct);


	/* -------------------------------------------------------------- */
	GPIO_SetBits(GPIOG, GPIO_Pin_14);
	int count = 0;
    while (1){
		// Delay initialization
		//DELAY_Init();

    	if (fastLED){
    		if (count >= 100000){
    			GPIO_ToggleBits(GPIOG, GPIO_Pin_13);
    			count = 0;
    		}else{
    			count+=10;
    		}
    	}else{
    		if (count >= 5000000){
				GPIO_ToggleBits(GPIOG, GPIO_Pin_13);
				count = 0;
			}else{
				count+=10;
			}
    	}


    	// Button pressed
    	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
    		// Start TIM2
			TIM_Cmd(TIM2, ENABLE);
			do{
    			if (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
//    				GPIO_ResetBits(GPIOG, GPIO_Pin_14);
    				// Stop TIM2
					TIM_Cmd(TIM2, DISABLE);

					if (fastLED){

						int aux = TIM4->CCR4;
						    	  	if(aux >= 2059){
						    	  		TIM4->CCR4 = 459;
						    	  	}else{
						    	  		aux = TIM4->CCR4 + 200;
						    	  		TIM4->CCR4 = aux;
						    	  	}


						aux = TIM4->CCR1;
						if(aux >= 2059){
							TIM4->CCR1 = 459;
						}else{
							aux = TIM4->CCR1 + 200;
							TIM4->CCR1 = aux;
						}
					}else{
						int aux = TIM4->CCR2;
						if(aux >= 2059){
							TIM4->CCR2 = 459;
						}else{
							aux = TIM4->CCR2 + 200;
							TIM4->CCR2 = aux;
						}
					}

					//Reset TIM2 value
					TIM2->CNT = 0;
    			}

    			if (fastLED){
					if (count >= 100000){
						GPIO_ToggleBits(GPIOG, GPIO_Pin_13);
						count = 0;
					}else{
						count+=10;
					}
				}else{
					if (count >= 5000000){
						GPIO_ToggleBits(GPIOG, GPIO_Pin_13);
						count = 0;
					}else{
						count+=10;
					}
				}


			}while(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0));
    	}else{
    		// Stop TIM2
			TIM_Cmd(TIM2, DISABLE);
    	}
   	}
}

void TIM2_IRQHandler(){
    // Checks whether the TIM2 interrupt has occurred or not

    if (TIM_GetITStatus(TIM2, TIM_IT_Update)){


    	GPIO_ToggleBits(GPIOG, GPIO_Pin_14);
    	fastLED = !fastLED;

        // Clears the TIM2 interrupt pending bit
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    }
}
