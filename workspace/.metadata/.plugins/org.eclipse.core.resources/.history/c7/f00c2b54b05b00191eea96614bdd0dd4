/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_tim.h"
#include "misc.h"
#include "delay.h"
#include "clock.h"
#include "tm_stm32f4_disco.h"

void TIM_Init(){
    // Enable clock for TIM4
    // We use TIM4 because green LED (PD12) is connected
    // to TIM4_CH1 GPIO AF mapping
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

    // Timer initialization struct
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;

    // Create 1kHz PWM
    // TIM4 is connected to APB1 bus that have default clock 84MHz
    // So, the frequency of TIM4 is 84MHz
    // We use prescaler 10 here
    // So, the frequency of TIM4 now is 8.4MHz
    TIM_TimeBaseInitStruct.TIM_Prescaler = 33;
    // TIM_Period determine the PWM frequency by this equation:
    // PWM_frequency = timer_clock / (TIM_Period + 1)
    // If we want 1kHz PWM we can calculate:
    // TIM_Period = (timer_clock / PWM_frequency) - 1
    // TIM_Period = (8.4MHz / 1kHz) - 1 = 8399
    TIM_TimeBaseInitStruct.TIM_Period = 8479;
    TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;

    // Initialize TIM4
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
    // Start TIM4
    TIM_Cmd(TIM4, ENABLE);
}

void GPIO_Configure (void){
    GPIO_InitTypeDef GPIO_InitDef;

	//Activem el clock per els pins G
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);

	//Inicialitzem leds:
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitDef.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitDef.GPIO_OType = GPIO_OType_PP;
	GPIO_InitDef.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOG, &GPIO_InitDef);
	GPIO_SetBits(GPIOG, GPIO_Pin_13);

}

void BUTTON_Configure(void){
	//Enable clock for GPOIA
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	GPIO_InitTypeDef GPIO_InitStruct;
	//Pin 0
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
	//Mode output
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
	//Output type push-pull
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	//With pull down resistor
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
	//100MHz pin speed
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	//Initialize pin on GPIOA port
	GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void PWM_Init(){
	// PWM initialization struct
	TIM_OCInitTypeDef TIM_OCInitStruct;

    // Common PWM settings
    TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;

    // Duty cycle calculation equation:
    // TIM_Pulse = (((TIM_Period + 1) * duty_cycle) / 100) - 1
    // Ex. 25% duty cycle:
    //     TIM_Pulse = (((8399 + 1) * 25) / 100) - 1 = 2099
    //     TIM_Pulse = (((8399 + 1) * 75) / 100) - 1 = 6299
    // We initialize PWM value with duty cycle of 25%
    TIM_OCInitStruct.TIM_Pulse = 1259;						//Temps de PWM a 1 (4099 = 50%) (1259 = 1'5ms) (2107 = 2'5ms) (559 = 0'7ms)
    TIM_OC1Init(TIM4, &TIM_OCInitStruct);
    //TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);


    // Enable clock for TIM2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

	// TIM2 initialization overflow every 500ms
	// TIM2 by default has clock of 84MHz
	// Here, we must set value of prescaler and period,
	// so update event is 0.5Hz or 500ms
	// Update Event (Hz) = timer_clock / ((TIM_Prescaler + 1) *
	// (TIM_Period + 1))
	// Update Event (Hz) = 84MHz / ((4199 + 1) * (9999 + 1)) = 2 Hz
	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
	TIM_TimeBaseInitStruct.TIM_Prescaler = 3599;
	TIM_TimeBaseInitStruct.TIM_Period = 9999;
	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;

	// TIM2 initialize
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
	// Enable TIM2 interrupt
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	// Nested vectored interrupt settings
	// TIM2 interrupt is most important (PreemptionPriority and
	// SubPriority = 0)
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStruct);
}


/*WELCOME TO CHINATOWN MOTHERFUCKER*/


static void Timer1_PWM_Config_Init(int prescaler)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	//时钟配置
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	//定时器配置
	TIM_TimeBaseStructure.TIM_Period = 71;								//设置计数值
	TIM_TimeBaseStructure.TIM_Prescaler = prescaler - 1;		//设置预分频
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;														//设置时钟分频系数：不分频
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;							//向上计数溢出模式
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	//PWM配置
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;												//配置为PWM模式1(小于计数值时为有效电平)
	//TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;					//比较输出使能
	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;					//比较输出的互补输出使能
	TIM_OCInitStructure.TIM_Pulse = 0;																			//设置待装入捕获比较寄存器的脉冲值
	//TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;							//当定时器计数值小于CCR1时为低电平
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;							//当定时器计数值小于CCR1时互补输出为低电平
	//TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;						//当MOE=0时，如果实现了OC*N，则死区后OC*=1
	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;						//当MOE=0时，如果实现了OC*N，则死区后OC*=1
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);																//使能通道2

	//默认关闭PWM
	Timer1_PWM_Status(1);

	//使能
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);												//CH2预装载使能
	TIM_ARRPreloadConfig(TIM1, ENABLE);																			//使能TIM1重载寄存器ARR
	TIM_Cmd(TIM1, ENABLE);																									//使能定时器1
}


void Timer1_PWM_Init(int prescalerValue)   {
	//初始化IO
	//IO结构体
	GPIO_InitTypeDef GPIO_InitStructure;

	//时钟配置
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	//IO初始化
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	//初始化定时器配置
	Timer1_PWM_Config_Init(prescalerValue);
}

void Timer1_PWM_SetDutyCycle(int duty)  {
  TIM_SetCompare2(TIM1, 71*duty/100);
}

void Timer1_PWM_Status(int status)  {
  //打开PWM
  if(status == 0)
  {
		TIM_SetCounter(TIM1, 0);
		TIM_CtrlPWMOutputs(TIM1, ENABLE);
  }
  //关闭PWM
  else
  {
		TIM_CtrlPWMOutputs(TIM1, DISABLE);
  }
}


int main(void){
	TIM_Init();
	PWM_Init();
	GPIO_Configure();
	BUTTON_Configure();

	/* Set clock for GPIOD ------------------------------------------ */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	// Set alternate function of GPIOD pin 12 as PWM outputs
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);

	// GPIOD pin 12 as outputs
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init(GPIOD, &GPIO_InitStruct);
	/* -------------------------------------------------------------- */



	Timer1_PWM_Init(33);
	Timer1_PWM_SetDutyCycle(200);
	Timer1_PWM_Status(0);



    while (1){
		// Delay initialization
		//DELAY_Init();

    	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
    		// Start TIM2
			TIM_Cmd(TIM2, ENABLE);
			do{
    			if (!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
    				// Stop TIM2
					TIM_Cmd(TIM2, DISABLE);

					int aux = TIM4->CCR1;
					if(aux >= 2059){
						TIM4->CCR1 = 459;
					}else{
						aux = TIM4->CCR1 + 200;
						TIM4->CCR1 = aux;
					}


					//Reset TIM2 value
					TIM2->CNT = 0;
    			}
			}while(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0));
    	}else{
    		// Stop TIM2
			TIM_Cmd(TIM2, DISABLE);
    	}
   	}
}

void TIM2_IRQHandler(){
    // Checks whether the TIM2 interrupt has occurred or not
    if (TIM_GetITStatus(TIM2, TIM_IT_Update)){

    	GPIO_ToggleBits(GPIOG, GPIO_Pin_13);

        // Clears the TIM2 interrupt pending bit
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    }
}
