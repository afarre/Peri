/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_tim.h"
#include "misc.h"
#include "delay.h"
#include "clock.h"
#include "tm_stm32f4_disco.h"

uint32_t pulse [9] = {0, 1050 - 1, 2100 - 1, 3150 - 1, 4200 - 1, 5250 - 1, 6300 - 1, 7350 - 1, 8400 - 1};


void TIMER_Configure (void){
    TIM_TimeBaseInitTypeDef TIMER_TimeBaseInitStructure;
    TIM_OCInitTypeDef  TIMER_OCInitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM7, ENABLE);

    TIMER_TimeBaseInitStructure.TIM_Prescaler = 8400 - 1;
    TIMER_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIMER_TimeBaseInitStructure.TIM_Period = 10000 - 1;
    TIMER_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIMER_TimeBaseInitStructure.TIM_RepetitionCounter = 0;
    TIM_TimeBaseInit (TIM7, &TIMER_TimeBaseInitStructure);

    TIM_ITConfig (TIM7, TIM_IT_Update, ENABLE);

    NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init (&NVIC_InitStructure);

    TIM_Cmd (TIM7, ENABLE);

    RCC_APB1PeriphClockCmd (RCC_APB1Periph_TIM4, ENABLE);

    TIMER_TimeBaseInitStructure.TIM_Prescaler = 0;
    TIMER_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIMER_TimeBaseInitStructure.TIM_Period = 8400 - 1;
    TIMER_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIMER_TimeBaseInitStructure.TIM_RepetitionCounter = 0;
    TIM_TimeBaseInit (TIM4, &TIMER_TimeBaseInitStructure);

    TIMER_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
    TIMER_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIMER_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
    TIMER_OCInitStructure.TIM_Pulse = 1 - 1;
    TIM_OC4Init (TIM4, &TIMER_OCInitStructure);
    TIM_OC4PreloadConfig (TIM4, TIM_OCPreload_Enable);

    TIM_Cmd (TIM4, ENABLE);
}

void GPIO_Configure (void){
    GPIO_InitTypeDef GPIO_InitDef;

	//Activem el clock per els pins G
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);

	//Inicialitzem leds:
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitDef.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitDef.GPIO_OType = GPIO_OType_PP;
	GPIO_InitDef.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOG, &GPIO_InitDef);
	GPIO_SetBits(GPIOG, GPIO_Pin_13);

	//BUTTON COFIGS
	//Enable clock for GPOIA
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	GPIO_InitTypeDef GPIO_InitStruct;
	//Pin 0
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
	//Mode output
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
	//Output type push-pull
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	//With pull down resistor
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
	//100MHz pin speed
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	//Initialize pin on GPIOA port
	GPIO_Init(GPIOA, &GPIO_InitStruct);
}

int main(void){
	TIMER_Configure();
	GPIO_Configure();
    while (1){
    	if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
			GPIO_ResetBits(GPIOG, GPIO_Pin_13);
		} else {
			GPIO_SetBits(GPIOG, GPIO_Pin_13);
		}
   	}
}

void TIM7_IRQHandler (void){
    static int i = 0;
    if (TIM_GetITStatus (TIM7, TIM_IT_Update ) != RESET){
    	if (GPIO_ReadOutputDataBit (GPIOD, GPIO_Pin_12) == Bit_SET){
    	            GPIO_SetBits (GPIOD, GPIO_Pin_13);
    	            GPIO_ResetBits (GPIOD, GPIO_Pin_12);
    	        }else if (GPIO_ReadOutputDataBit (GPIOD, GPIO_Pin_13) == Bit_SET){
    	            GPIO_SetBits (GPIOD, GPIO_Pin_14);
    	            GPIO_ResetBits (GPIOD, GPIO_Pin_13);
    	        }else if (GPIO_ReadOutputDataBit (GPIOD, GPIO_Pin_14) == Bit_SET){
    	            GPIO_SetBits (GPIOD, GPIO_Pin_15);
    	            GPIO_ResetBits (GPIOD, GPIO_Pin_14);
    	        }else if (GPIO_ReadOutputDataBit (GPIOD, GPIO_Pin_15) == Bit_SET){
    	            GPIO_SetBits (GPIOD, GPIO_Pin_12);
    	            GPIO_ResetBits (GPIOD, GPIO_Pin_15);
    	        }
        TIM_SetCompare4 (TIM4, pulse [i]);

        i++;
        if (i == 9)
     i = 0;

 TIM_ClearITPendingBit (TIM7, TIM_IT_Update);
    }
}
